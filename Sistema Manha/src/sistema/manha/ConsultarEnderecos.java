/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package sistema.manha;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jason Santos
 */
public class ConsultarEnderecos extends javax.swing.JInternalFrame {

    /**
     * Creates new form ConsultarEnderecos
     */
    public ConsultarEnderecos() {
        super("Consultar Endere√ßos",
        false,true,false,false);
        this.setLocation(40,40);
        initComponents();       
        getRootPane().setDefaultButton(btnConsultar);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblLocalizar = new javax.swing.JLabel();
        txtLocalizar = new javax.swing.JTextField();
        cboLocalizar = new javax.swing.JComboBox();
        btnConsultar = new javax.swing.JButton();
        btnAlterar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        btnFechar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaEnderecos = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuArquivo = new javax.swing.JMenu();
        itemConsultar = new javax.swing.JMenuItem();
        itemAlterar = new javax.swing.JMenuItem();
        itemExcluir = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        itemFechar = new javax.swing.JMenuItem();

        lblLocalizar.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblLocalizar.setText("Localizar Por:");

        txtLocalizar.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        cboLocalizar.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        cboLocalizar.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Rua", "CEP", "Bairro", "Cidade", "Estado" }));

        btnConsultar.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btnConsultar.setText("Consultar");
        btnConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarActionPerformed(evt);
            }
        });

        btnAlterar.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btnAlterar.setText("Alterar");
        btnAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarActionPerformed(evt);
            }
        });

        btnExcluir.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btnExcluir.setText("Excluir");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        btnFechar.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btnFechar.setText("Fechar");
        btnFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFecharActionPerformed(evt);
            }
        });

        tabelaEnderecos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Rua", "CEP", "Bairro", "Cidade", "Estado"
            }
        ));
        jScrollPane2.setViewportView(tabelaEnderecos);

        menuArquivo.setText("Arquivo");

        itemConsultar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER, java.awt.event.InputEvent.CTRL_MASK));
        itemConsultar.setText("Consultar");
        itemConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemConsultarActionPerformed(evt);
            }
        });
        menuArquivo.add(itemConsultar);

        itemAlterar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        itemAlterar.setText("Alterar");
        itemAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemAlterarActionPerformed(evt);
            }
        });
        menuArquivo.add(itemAlterar);

        itemExcluir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        itemExcluir.setText("Excluir");
        itemExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemExcluirActionPerformed(evt);
            }
        });
        menuArquivo.add(itemExcluir);
        menuArquivo.add(jSeparator1);

        itemFechar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        itemFechar.setText("Fechar");
        itemFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemFecharActionPerformed(evt);
            }
        });
        menuArquivo.add(itemFechar);

        jMenuBar1.add(menuArquivo);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(lblLocalizar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboLocalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(txtLocalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnConsultar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAlterar)
                                .addGap(149, 149, 149)
                                .addComponent(btnExcluir)
                                .addGap(181, 181, 181)
                                .addComponent(btnFechar))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 639, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(26, 58, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboLocalizar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLocalizar)
                    .addComponent(txtLocalizar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConsultar))
                .addGap(28, 28, 28)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAlterar)
                    .addComponent(btnExcluir)
                    .addComponent(btnFechar))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFecharActionPerformed
        dispose();
    }//GEN-LAST:event_btnFecharActionPerformed

    private void btnConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarActionPerformed
        if (txtLocalizar.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null,
            "Preencha o dado que deseja pesquisar",
            "Preencha o dado",
            JOptionPane.ERROR_MESSAGE);
            txtLocalizar.requestFocus();
        }else
        {
            DefaultTableModel manipulaTabela=
        (DefaultTableModel)tabelaEnderecos.getModel();
        //conectar o banco e consultar
        if (manipulaTabela.getRowCount()!=0)
        {
            for (int i=manipulaTabela.getRowCount()-1;
            i>=0;i--)
                manipulaTabela.removeRow(i);
        }
        try
        {
            ResultSet registros=null;
            if (cboLocalizar.getSelectedItem()
                    .equals("Rua"))
            {
                PreparedStatement consultar=
                Principal.conexao.prepareStatement
                ("SELECT COUNT(*) as numero FROM enderecos WHERE rua='" 
                + txtLocalizar.getText().toUpperCase() + "'");    
                registros=consultar.executeQuery();
                registros.next();//acessa o resultado
                int quantidade=Integer.parseInt
                (registros.getString("numero"));
                if (quantidade!=0)
                {
                    //preencher a tabela
                    consultar=Principal.conexao.prepareStatement
                    ("SELECT * FROM enderecos WHERE rua='" + 
                            txtLocalizar.getText().toUpperCase() + "'");
                    registros=consultar.executeQuery();
                    registros.next();
                    do
                    {
                        String rua=registros.getString("rua");
                        String cep=registros.getString("cep");
                        String bairro=registros.getString("bairro");
                        String cidade=registros.getString("cidade");
                        String estado=registros.getString("estado");
                        manipulaTabela.addRow(new Object[]
                        {rua,cep,bairro,cidade,estado});
                    }while (registros.next());                           
                }else
                {
                    //dizer nenhum registro encontrado
                    JOptionPane.showMessageDialog(null,
                    "Nenhum registro encontrado!!!",
                    "Nenhum registro",
                    JOptionPane.INFORMATION_MESSAGE);
                    txtLocalizar.requestFocus();
                    txtLocalizar.selectAll();
                }
            }else if (cboLocalizar.getSelectedItem()
                    .equals("CEP"))
            {
                PreparedStatement consultar=
                Principal.conexao.prepareStatement
                ("SELECT COUNT(*) as numero FROM enderecos WHERE cep='" 
                + txtLocalizar.getText() + "'");    
                registros=consultar.executeQuery();
                registros.next();//acessa o resultado
                int quantidade=Integer.parseInt
                (registros.getString("numero"));
                if (quantidade!=0)
                {
                    //preencher a tabela
                    consultar=Principal.conexao.prepareStatement
                    ("SELECT * FROM enderecos WHERE cep='" + 
                            txtLocalizar.getText() + "'");
                    registros=consultar.executeQuery();
                    registros.next();
                    do
                    {
                        String rua=registros.getString("rua");
                        String cep=registros.getString("cep");
                        String bairro=registros.getString("bairro");
                        String cidade=registros.getString("cidade");
                        String estado=registros.getString("estado");
                        manipulaTabela.addRow(new Object[]
                        {rua,cep,bairro,cidade,estado});
                    }while (registros.next());                           
                }else
                {
                    //dizer nenhum registro encontrado
                    JOptionPane.showMessageDialog(null,
                    "Nenhum registro encontrado!!!",
                    "Nenhum registro",
                    JOptionPane.INFORMATION_MESSAGE);
                    txtLocalizar.requestFocus();
                    txtLocalizar.selectAll();
                }
            }else if (cboLocalizar.getSelectedItem()
                    .equals("Bairro"))
            {
                PreparedStatement consultar=
                Principal.conexao.prepareStatement
                ("SELECT COUNT(*) as numero FROM enderecos WHERE bairro='" 
                + txtLocalizar.getText().toUpperCase() + "'");    
                registros=consultar.executeQuery();
                registros.next();//acessa o resultado
                int quantidade=Integer.parseInt
                (registros.getString("numero"));
                if (quantidade!=0)
                {
                    //preencher a tabela
                    consultar=Principal.conexao.prepareStatement
                    ("SELECT * FROM enderecos WHERE bairro='" + 
                            txtLocalizar.getText().toUpperCase() + "'");
                    registros=consultar.executeQuery();
                    registros.next();
                    do
                    {
                        String rua=registros.getString("rua");
                        String cep=registros.getString("cep");
                        String bairro=registros.getString("bairro");
                        String cidade=registros.getString("cidade");
                        String estado=registros.getString("estado");
                        manipulaTabela.addRow(new Object[]
                        {rua,cep,bairro,cidade,estado});
                    }while (registros.next());                           
                }else
                {
                    //dizer nenhum registro encontrado
                    JOptionPane.showMessageDialog(null,
                    "Nenhum registro encontrado!!!",
                    "Nenhum registro",
                    JOptionPane.INFORMATION_MESSAGE);
                    txtLocalizar.requestFocus();
                    txtLocalizar.selectAll();
                }
            }else if (cboLocalizar.getSelectedItem()
                    .equals("Cidade"))
            {
                PreparedStatement consultar=
                Principal.conexao.prepareStatement
                ("SELECT COUNT(*) as numero FROM enderecos WHERE cidade='" 
                + txtLocalizar.getText().toUpperCase() + "'");    
                registros=consultar.executeQuery();
                registros.next();//acessa o resultado
                int quantidade=Integer.parseInt
                (registros.getString("numero"));
                if (quantidade!=0)
                {
                    //preencher a tabela
                    consultar=Principal.conexao.prepareStatement
                    ("SELECT * FROM enderecos WHERE cidade='" + 
                            txtLocalizar.getText().toUpperCase() + "'");
                    registros=consultar.executeQuery();
                    registros.next();
                    do
                    {
                        String rua=registros.getString("rua");
                        String cep=registros.getString("cep");
                        String bairro=registros.getString("bairro");
                        String cidade=registros.getString("cidade");
                        String estado=registros.getString("estado");
                        manipulaTabela.addRow(new Object[]
                        {rua,cep,bairro,cidade,estado});
                    }while (registros.next());                           
                }else
                {
                    //dizer nenhum registro encontrado
                    JOptionPane.showMessageDialog(null,
                    "Nenhum registro encontrado!!!",
                    "Nenhum registro",
                    JOptionPane.INFORMATION_MESSAGE);
                    txtLocalizar.requestFocus();
                    txtLocalizar.selectAll();
                }
            }else if (cboLocalizar.getSelectedItem()
                    .equals("Estado"))
            {
                PreparedStatement consultar=
                Principal.conexao.prepareStatement
                ("SELECT COUNT(*) as numero FROM enderecos WHERE estado='" 
                + txtLocalizar.getText().toUpperCase() + "'");    
                registros=consultar.executeQuery();
                registros.next();//acessa o resultado
                int quantidade=Integer.parseInt
                (registros.getString("numero"));
                if (quantidade!=0)
                {
                    //preencher a tabela
                    consultar=Principal.conexao.prepareStatement
                    ("SELECT * FROM enderecos WHERE estado='" + 
                            txtLocalizar.getText().toUpperCase() + "'");
                    registros=consultar.executeQuery();
                    registros.next();
                    do
                    {
                        String rua=registros.getString("rua");
                        String cep=registros.getString("cep");
                        String bairro=registros.getString("bairro");
                        String cidade=registros.getString("cidade");
                        String estado=registros.getString("estado");
                        manipulaTabela.addRow(new Object[]
                        {rua,cep,bairro,cidade,estado});
                    }while (registros.next());                           
                }else
                {
                    //dizer nenhum registro encontrado
                    JOptionPane.showMessageDialog(null,
                    "Nenhum registro encontrado!!!",
                    "Nenhum registro",
                    JOptionPane.INFORMATION_MESSAGE);
                    txtLocalizar.requestFocus();
                    txtLocalizar.selectAll();
                }
            }
        }catch (SQLException e)
        {
            JOptionPane.showMessageDialog(null,
            "Erro de SQL: " + e.getMessage(),
            "Erro",JOptionPane.ERROR_MESSAGE);
        }catch (Exception e)
        {
            JOptionPane.showMessageDialog(null,
            "Erro: " + e.getMessage(),
            "Erro",JOptionPane.ERROR_MESSAGE);
        }
        }        
    }//GEN-LAST:event_btnConsultarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        if (tabelaEnderecos.getSelectedRow()>=0)
        {
            Object[] opcoes={"Sim","N√£o"};
            int retorno=JOptionPane.showOptionDialog
            (null,"Tem certeza que deseja excluir?",
            "Excluir",JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE,null,
            opcoes,opcoes[0]);
            if (retorno==0)
            {
                DefaultTableModel manipulaTabela=
                (DefaultTableModel)tabelaEnderecos.getModel();
                try
                {
                    PreparedStatement excluir=
                    Principal.conexao.prepareStatement
                    ("DELETE FROM enderecos WHERE rua=? AND cep=? AND bairro=? AND cidade=? AND estado=?");
                    excluir.setString(1,
                    manipulaTabela.getValueAt
                    (tabelaEnderecos.getSelectedRow(),0).toString());
                    excluir.setString(2,
                    manipulaTabela.getValueAt
                    (tabelaEnderecos.getSelectedRow(),1).toString());
                    excluir.setString(3,
                    manipulaTabela.getValueAt
                    (tabelaEnderecos.getSelectedRow(),2).toString());
                    excluir.setString(4,
                    manipulaTabela.getValueAt
                    (tabelaEnderecos.getSelectedRow(),3).toString());
                    excluir.setString(5,
                    manipulaTabela.getValueAt
                    (tabelaEnderecos.getSelectedRow(),4).toString());
                    excluir.executeUpdate();
                    manipulaTabela.removeRow
                    (tabelaEnderecos.getSelectedRow());
                    JOptionPane.showMessageDialog(null,
                    "Endere√ßo exclu√≠do com sucesso!!!",
                    "Exclu√≠do",JOptionPane.INFORMATION_MESSAGE);                    
                    dispose();
                }catch (SQLException e)
                {
                    JOptionPane.showMessageDialog(null,
                    "Erro de SQL: " + e.getMessage(),
                    "Erro",JOptionPane.ERROR_MESSAGE);
                }catch (Exception e)
                {
                    JOptionPane.showMessageDialog(null,
                    "Erro: " + e.getMessage(),
                    "Erro",JOptionPane.ERROR_MESSAGE);
                }
            }            
        }else
        {
            JOptionPane.showMessageDialog(null,
            "Selecione um registro da tabela antes de "
             + "clicar no bot√£o excluir","Erro",
             JOptionPane.ERROR_MESSAGE);
        }        
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarActionPerformed
        if (tabelaEnderecos.getSelectedRow()>=0)
        {
            DefaultTableModel manipulaTabela=
            (DefaultTableModel)tabelaEnderecos.getModel();
            //acessa a tabela
            String rua=manipulaTabela.getValueAt
            (tabelaEnderecos.getSelectedRow(),0).toString();
            String cep=manipulaTabela.getValueAt
            (tabelaEnderecos.getSelectedRow(),1).toString();
            String bairro=manipulaTabela.getValueAt
            (tabelaEnderecos.getSelectedRow(),2).toString();
            String cidade=manipulaTabela.getValueAt
            (tabelaEnderecos.getSelectedRow(),3).toString();
            String estado=manipulaTabela.getValueAt
            (tabelaEnderecos.getSelectedRow(),4).toString();
            CadastrarAlterarEnderecos alterar=new 
            CadastrarAlterarEnderecos
            (rua,cep,bairro,cidade,estado);
            Principal.jdpPrincipal.add(alterar);
            alterar.setVisible(true);
            dispose();
        }else
        {
            JOptionPane.showMessageDialog(null,
            "Selecione um registro da tabela antes de "
             + "clicar no bot√£o alterar","Erro",
             JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAlterarActionPerformed

    private void itemConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemConsultarActionPerformed
        this.btnConsultarActionPerformed(evt);
    }//GEN-LAST:event_itemConsultarActionPerformed

    private void itemAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemAlterarActionPerformed
        this.btnAlterarActionPerformed(evt);
    }//GEN-LAST:event_itemAlterarActionPerformed

    private void itemExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemExcluirActionPerformed
        this.btnExcluirActionPerformed(evt);
    }//GEN-LAST:event_itemExcluirActionPerformed

    private void itemFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemFecharActionPerformed
        this.btnFecharActionPerformed(evt);
    }//GEN-LAST:event_itemFecharActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlterar;
    private javax.swing.JButton btnConsultar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnFechar;
    private javax.swing.JComboBox cboLocalizar;
    private javax.swing.JMenuItem itemAlterar;
    private javax.swing.JMenuItem itemConsultar;
    private javax.swing.JMenuItem itemExcluir;
    private javax.swing.JMenuItem itemFechar;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JLabel lblLocalizar;
    private javax.swing.JMenu menuArquivo;
    private javax.swing.JTable tabelaEnderecos;
    private javax.swing.JTextField txtLocalizar;
    // End of variables declaration//GEN-END:variables
}
